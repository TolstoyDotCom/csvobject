<?php
/*
 * Copyright 2020 Chris Kelly
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

/*
 * The class was modified from EasyCSV\Reader from github.com/jwage/easy-csv (MIT License).
 */

if ( file_exists( __DIR__ . '/vendor/autoload.php' ) ) {
	require_once( __DIR__ . '/vendor/autoload.php' );
}
else if ( file_exists( __DIR__ . '/../vendor/autoload.php' ) ) {
	require_once( __DIR__ . '/../vendor/autoload.php' );
}
else {
	echo 'Cannot find autoload.php';
	exit;
}

class %%MAIN_CLASS_NAME%% {
	/** @var string */
	private $sourcePath = '';

	/** @var EasyCSV\Reader */
	private $reader = NULL;

	public function __construct( $sourcePath = '%%SOURCE_PATH%%' ) {
		$this->sourcePath = $sourcePath;
		$this->reader = new \EasyCSV\Reader( $this->sourcePath, 'r' );
	}

	/**
	 * @return string
	 */
	public function getSourcePath() {
		return $this->sourcePath;
	}

	/**
	 * @return EasyCSV\Reader
	 */
	public function getReader() {
		return $this->reader;
	}

	/**
	 * @return string[]|bool
	 */
	public function getHeaders() {
		return $this->reader->getHeaders();
	}

	/**
	 * @return mixed[]|bool
	 */
	public function getRow() {
		$row = $this->reader->getRow();
		if ( is_array( $row ) ) {
			return new %%ROW_CLASS_NAME%%( $row );
		}

		return $row;
	}

	public function isEof() : bool {
		return $this->reader->isEof();
	}

	/**
	 * @return mixed[]
	 */
	public function getAll() : array {
		$rows = $this->reader->getAll();

		$ret = [];
		foreach ( $rows as $row ) {
			$ret[] = new %%ROW_CLASS_NAME%%( $row );
		}

		return $ret;
	}

	public function getLineNumber() : int {
		return $this->reader->getLineNumber();
	}

	/**
	 * @return int|bool
	 */
	public function getLastLineNumber() {
		return $this->reader->getLastLineNumber();
	}

	/**
	 * @return string[]
	 */
	public function getCurrentRow() : array {
		$row = $this->reader->getCurrentRow();
		if ( is_array( $row ) ) {
			return new %%ROW_CLASS_NAME%%( $row );
		}

		return $row;
	}

	public function advanceTo(int $lineNumber) : void {
		$this->reader->advanceTo( $lineNumber );
	}

	public function setHeaderLine(int $lineNumber) : bool {
		return $this->reader->setHeaderLine( $lineNumber );
	}
}
